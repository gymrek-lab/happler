import warnings
from pathlib import Path
import snakemake.io as io
from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("8.12.0")


# IMPORT CONFIG VARIABLES
configfile: "config/config.yml"


def check_config(value, default=False, place=config, as_set=False):
    """return true if config value exists and is true"""
    value = place[value] if (value in place and place[value]) else default
    return (set(value) if isinstance(value, list) else {value}) if as_set else value


# handle defaults
config["out"] = check_config("out", "out")
config["min_maf"] = check_config("min_maf", 0)
config["exclude_causal"] = check_config("exclude_causal", False, as_set=True)
mode = config["mode"]
# handle locus
if mode == "run":
    pheno_set = set(glob_wildcards(Path(config["modes"][mode]["pheno"])).trait)
if mode == "midway":
    locus = glob_wildcards(config["modes"][mode]["haps"]).locus
elif Path(config["locus"]).exists() and Path(config["locus"]).suffix == ".bed":
    with open(Path(config["locus"])) as f:
        # the fourth column of the bed file must contain the name of the trait
        locus_file = [
            (cols[3], f"{cols[0]}_{float(cols[1]):.0f}-{float(cols[2]):.0f}")
            for cols in (line.strip().split() for line in f)
            if not cols[0].startswith("#") and (
                mode != "run" or (cols[3] in pheno_set)
            )
        ]
    locus_traits, locus = list(zip(*locus_file))
else:
    locus = config["locus"].replace(":", "_")
# convert the exclude_causal var into a dict for later
exclude_causal = {("in", "ex")[val]: val for val in config["exclude_causal"]}
# remove any trailing slashes in directories
orig_out = str(Path(config["out"]))
config["out"] = str(Path(config["out"])) + "/{locus}"


module genotypes:
    snakefile: "rules/genotypes.smk"
    config: config

use rule * from genotypes as genotypes_*
if mode == "str":
    config["gts_str_panel"] = config["str_panel"]
if check_config("sample_size"):
    sampsize = config["sample_size"]
    config["gts_snp_panel"] = rules.genotypes_subset.output.pgen
    config["out"] += "/{sampsize}samples"
else:
    config["gts_snp_panel"] = rules.genotypes_subset.input.pgen
config["random"] = False

if mode == "ld_range" and check_config("num_haps", place=config["modes"][mode]):
    if isinstance(config["modes"][mode]["num_haps"], int):
        config["modes"][mode]["num_haps"] = [config["modes"][mode]["num_haps"],]

if mode == "midway":
    if not check_config("beta", place=config["modes"][mode]):
        # if no beta is specified, then we default to whatever is in the original hap
        # file (represented by a placeholder of 0)
        config["modes"][mode]["beta"] = (0,)
    if not check_config("reps", place=config["modes"][mode]):
        # if no reps are specified, then we default to just 1
        config["modes"][mode]["reps"] = 1

if mode != "run":
    module simulate:
        snakefile: "rules/simulate.smk"
        config: config
    use rule * from simulate as simulate_*

if mode == "ld_range" and config["modes"][mode]["random"]:
    config["random"] = True
    module simulate_random:
        snakefile: "rules/simulate.smk"
        config: config
    use rule * from simulate_random as simulate_random_*
del config["random"]

covar_file = check_config("covar", default=[])
if check_config("covar"):
    covar_config = {
        "covar": covar_file,
        "out": orig_out,
    }
    if mode == "run":
        covar_config["pheno"] = config["modes"][mode]["pheno"]
        if check_config("pheno_matrix", place=config["modes"][mode]):
            covar_config["pheno_matrix"] = config["modes"][mode]["pheno_matrix"]
    module covariates:
        snakefile: "rules/covariates.smk"
        config: covar_config
    use rule * from covariates as covariates_*
    if "pheno_matrix" in covar_config:
        covar_file = rules.covariates_merge.output.covar

if mode in ("str", "snp", "hap", "ld_range", "midway"):
    happler_config = {
        "pheno": rules.simulate_simphenotype.output.pheno,
        "hap_file": rules.simulate_transform.input.hap,
        "snp_panel": config["gts_snp_panel"],
        "out": config["out"] + "/happler/"+mode+"/beta_{beta}",
        "random": None,
        "covar": covar_file,
        "min_maf": check_config("min_maf", 0),
        "out_thresh": 1, # artificially set to 1 to avoid filtering
    }
    if mode in ("hap", "ld_range", "midway"):
        happler_config["snps"] = []
        happler_config["causal_gt"] = rules.simulate_transform.output
        if mode == "hap":
            happler_config["snps"] = config["modes"][mode]["alleles"]
        elif mode == "ld_range":
            happler_config["out"] = config["out"] + "/happler/"+mode+"/{num_haps}_haps/ld_{ld}/beta_{beta}/alpha_{alpha}"
        elif mode == "midway":
            happler_config["out"] = config["out"] + "/midway/sim_{sim_mode}/beta_{beta}"
    elif mode in ("str", "snp"):
        # also provide the SNP and STR IDs so that they can be used in the manhattan plot
        happler_config["snps"] = (config["modes"][mode]["id"],)
        # TODO: consider uncommenting this to compute LD with causal STR
        # if mode == "str":
        #     happler_config["causal_gt"] = config["gts_str_panel"]
    if check_config("reps", place=config["modes"][mode]):
        happler_config["out"] = happler_config["out"] + "/rep_{rep}"
elif mode == "run":
    happler_config = {
        "pheno": config["modes"][mode]["pheno"],
        "hap_file": [],
        "snp_panel": config["gts_snp_panel"],
        "out": config["out"] + f"/happler/{mode}/" + "{trait}",
        "random": None,
        "covar": covar_file,
        "min_maf": check_config("min_maf", 0),
        "out_thresh": check_config("out_thresh", 5e-8),
    }
    if check_config("SVs", place=config["modes"][mode]):
        happler_config["SVs"] = config["modes"][mode]["SVs"]
else:
    raise ValueError("Unsupported operating 'mode' in config")

if mode == "midway":
    module midway:
        snakefile: "rules/midway.smk"
        config: happler_config
    use rule * from midway as midway_*
else:
    module happler:
        snakefile: "rules/happler.smk"
        config: happler_config
    use rule * from happler as happler_*
    merged_happler = rules.happler_merge.output.pgen

if mode == "ld_range" and config["modes"][mode]["random"]:
    happler_config["random"] = rules.simulate_random_transform.output
    happler_config["random_hap"] = rules.simulate_random_transform.input.hap
    happler_config["out"] = config["out"] + "/happler/"+mode+"/random/{num_haps}_haps/ld_{ld}/beta_{beta}/alpha_{alpha}/rep_{rep}"
    module happler_random:
        snakefile: "rules/happler.smk"
        config: happler_config
    use rule * from happler_random as happler_random_*

plots_config = {
    "out": config["out"] + "/plots",
    "mode": mode,
    "mode_attrs": config["modes"][mode],
    "causal_hap": rules.simulate_transform.input.hap if mode != "run" else [],
    "snp_panel": config["gts_snp_panel"],
}
if mode == "ld_range":
    plots_config["ld_range_checkpoint"] = checkpoints.simulate_create_hap_ld_range
elif mode == "midway":
    plots_config["midway_linear"] = rules.midway_manhattan.output.linear
    plots_config["loci"] = locus
    plots_config["out"] = plots_config["out"].replace("/plots", "").replace("{locus}", "plots")
else:
    plots_config["happler_metrics"] = rules.happler_metrics.output.metrics
    plots_config["happler_hap"] = rules.happler_run.output.hap

module plots:
    snakefile: "rules/plots.smk"
    config: plots_config
use rule * from plots as plots_*

if mode == "ld_range":
    FINAL_OUTPUT = [rules.plots_params.output.png, rules.plots_metrics.output.png]
elif mode == "run":
    checkpoint multiline:
        input:
            hps = expand(
                rules.happler_run.output.hap,
                zip, trait=locus_traits, locus=locus, allow_missing=True,
            ),
        params:
            out = orig_out,
            hp_path = Path(str(rules.happler_run.output.hap).format(locus="*", trait="*")),
        output:
            hps = orig_out + "/multiline.tsv",
        resources:
            runtime=10,
        log:
            orig_out + "/logs/multiline",
        benchmark:
            orig_out + "/bench/multiline",
        conda:
            "envs/default.yml"
        shell:
            "for i in {params.hp_path}; do if [ $("
            "grep '^V' $i | cut -f2 | sort | uniq -c | sed 's/^ *//' | awk -F ' ' '$1 > 1' | wc -l"
            ") -ne 0 ]; then echo $i; fi; done | "
            "sed 's+^{params.out}/++;s+/happler/run/+\\t+;s+/happler.hap$++' >{output} 2>{log}"

    def FINAL_OUTPUT(wildcards):
        files = [
            rules.happler_pips.output.tsv,
            rules.happler_tree.output.png,
            rules.happler_linreg.output.png,
            rules.happler_heatmap.output.png,
            # rules.happler_manhattan.output.png,
            rules.happler_cond_linreg.output.png,
            rules.happler_results.output.susie_pdf,
        ]
        if check_config("SVs", place=config["modes"][mode]):
            files.append(rules.happler_sv_ld.output.ld)
        with open(checkpoints.multiline.get().output["hps"], 'r') as file:
            multiline_locus, multiline_traits = zip(*(f[:-1].split("\t") for f in file.readlines()))
        return expand(
            expand(
                files, zip, trait=multiline_traits, locus=multiline_locus,
                allow_missing=True,
            ), ex=("in",), allow_missing=True,
        )

    rule all:
        input:
            FINAL_OUTPUT
        default_target: True
elif mode == "midway":
    FINAL_OUTPUT = expand(
        [
            rules.plots_midway.output.png,
        ],
        switch=("tscore", "interact"),
        sampsize=config["sample_size"],
    )
else:
    FINAL_OUTPUT = expand(
        [
            rules.happler_cond_linreg.output.png,
            rules.happler_tree.output.png,
            # rules.finemappers_results.output.susie_pdf,
            rules.happler_results.output.susie_pdf,
            # rules.plots_params.output.png,
        ],
        ex=(("in",) if mode == "hap" else ("ex", "in")),
        beta=config["modes"][mode]["beta"],
        allow_missing=True,
    )
    if check_config("reps", place=config["modes"][mode]):
        FINAL_OUTPUT = expand(
            FINAL_OUTPUT,
            rep=range(config["modes"][mode]["reps"]),
            allow_missing=True,
        )

# If '--config debug=true' is specified, we won't try to build the entire DAG
# This can be helpful when you want to play around with a specific target output
if not check_config("debug", False) and mode != "run":
    rule all:
        input:
            expand(
                FINAL_OUTPUT,
                locus=locus,
                sampsize=config["sample_size"],
            ) if check_config("sample_size") else expand(FINAL_OUTPUT, locus=locus)
        default_target: True
